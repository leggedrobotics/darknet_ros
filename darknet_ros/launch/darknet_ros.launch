<?xml version="1.0" encoding="utf-8"?>

<launch>
  <!-- Arguments to generate darknet network. -->
  <arg name="yolo_model"                 default="tiny-yolo-voc"/>
  <arg name="yolo_weights_path"          default="$(find darknet_ros)/weights"/>
  <arg name="yolo_cfg_model"             default="$(arg yolo_model).cfg"/>
  <arg name="yolo_weights_model"         default="$(arg yolo_model).weights"/>
  <arg name="yolo_names_model"           default="voc.names"/>

  <!-- Name of camera topic -->
  <arg name="camera_topic_name"          default="/camera/image_raw"/>

  <!-- Name of CheckForObjectsAction (darknet_ros_msgs) -->
  <arg name="camera_action_name"         default="/darknet/check_for_objects"/>

  <!-- Threshold of object detection -->
  <arg name="yolo_object_threshold"      default="0.3"/>

  <!-- Enable image view in opencv -->
  <arg name="view_image_in_opencv"       default="true"/>

  <!-- Enable image view in opencv -->
  <arg name="use_darknet_image_viewer"   default="false"/>

  <!-- Delay for cv::waitkey(delay) in millisecons -->
  <arg name="wait_key_delay_in_opencv"   default="2"/>

  <!-- Start darknet and ros wrapper -->
  <node pkg="darknet_ros" type="darknet_ros" name="darknet_ros" output="screen">
    <param name="cfg_model"             value="$(arg yolo_cfg_model)" />
    <param name="weights_model"         value="$(arg yolo_weights_model)" />
    <param name="names_model"           value="$(arg yolo_names_model)" />
    <param name="weights_path"          value="$(arg yolo_weights_path)" />
    <param name="camera_topic"          value="$(arg camera_topic_name)" />
    <param name="camera_action"         value="$(arg camera_action_name)" />
    <param name="object_threshold"      value="$(arg yolo_object_threshold)" />
    <param name="view_image"            value="$(arg view_image_in_opencv)" />
    <param name="darknet_image_viewer"  value="$(arg use_darknet_image_viewer)" />
    <param name="wait_key_delay"        value="$(arg wait_key_delay_in_opencv)" />
  </node>

 <!--<node name="republish" type="republish" pkg="image_transport" output="screen" 	args="compressed in:=/front_camera/image_raw raw out:=/camera/image_raw" /> -->
</launch>
